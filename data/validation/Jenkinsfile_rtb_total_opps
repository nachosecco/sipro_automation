@Library('c6_shared_lib@master') _

def AWS_ENVIRONMENT = JOB_NAME.split("/")[0]

pipeline {
	agent { label 'shared_infra_slave' }

	environment {
		HOUR = sh(script: "date -u -d '-${HOURS_DELAYED} hours' '+%Y%m%d_%H00'", returnStdout: true).trim()
		USER = sh(script: "aws secretsmanager get-secret-value --region us-west-2 --secret-id /shared_infra/data_validation_${AWS_ENVIRONMENT}/DATA_VALIDATION_USER | jq --raw-output '.SecretString'", returnStdout: true).trim()
		PASSWORD = sh(script: "aws secretsmanager get-secret-value --region us-west-2 --secret-id /shared_infra/data_validation_${AWS_ENVIRONMENT}/DATA_VALIDATION_PASSWORD | jq --raw-output '.SecretString'", returnStdout: true).trim()
	}

	stages {
		stage("Run Validations") {
			agent {label "${AWS_ENVIRONMENT}_slave"}

			steps {
				dir("data") {
					script {
						if (params.HOUR != null && !params.HOUR.isEmpty()) {
							HOUR = params.HOUR
						}
					}
					withPythonEnv('Python-3.8') {
						sh """
							pip3 install -r requirements.txt
							export PYTHONPATH=`pwd`
							python validation/rtb_total_opps.py ${AWS_ENVIRONMENT} ${HOUR} ${params.COMPANY_GUID} ${USER} ${PASSWORD}
						"""
					}
				}
			}
		}
	}
	post {
		success {
			script {
				def successMessage = "Total Rtb Opps from Druid and Athena for hour ${HOUR} matches in ${AWS_ENVIRONMENT} environment:- ${BUILD_URL}"
				if (AWS_ENVIRONMENT == "prod") {
					jenkinsNotifications.notify("Success", successMessage, "c6-jenkins-prod-success")
				} else {
					jenkinsNotifications.notify("Success", successMessage, "c6-jenkins-nonprod-success")
				}
			}
		}
		failure {
			script {
				node('shared_infra_static_slave_1') {
				def failureMessage = "ALERT: Total Rtb Opps from Druid and Athena for hour ${HOUR} does not match in ${AWS_ENVIRONMENT} environment:- ${BUILD_URL}"
				if (AWS_ENVIRONMENT == "prod") {
					def snsSubject = "rtb-opps-validation-prod Job FAILED!"
					def snsArn = "arn:aws:sns:us-west-2:222177275596:c6_shared_infra_sns_uw2_jenkins_alerts"
                    jenkinsNotifications.notify("Failure", failureMessage, "c6-jenkins-prod-failures")
                    sh "aws sns publish --topic-arn '${snsArn}' --subject '${snsSubject}' --message '${failureMessage}'"
				} else {
					jenkinsNotifications.notify("Failure", failureMessage, "c6-jenkins-nonprod-failures")
				}
			}
		}
	}
}
}
